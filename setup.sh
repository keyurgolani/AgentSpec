#!/bin/bash
# AgentSpec Setup - Initialize specification-driven development in your project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

AGENTSPEC_VERSION="1.0.0"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create project structure
create_project_structure() {
    log_info "Creating AgentSpec project structure..."

    mkdir -p scripts
    mkdir -p docs

    log_success "Project directories created"
}

# Create configuration files
create_config_files() {
    log_info "Creating configuration files..."

    # Create .agentspec config file
    cat > .agentspec << 'EOF'
# AgentSpec Configuration
version=1.0.0
project_context_file=project_context.md
validation_script=scripts/validate.sh
test_script=test

# Default tags for this project
default_tags=general,testing,quality

# Validation settings
strict_mode=true
treat_warnings_as_errors=true
require_tests=true
require_documentation=true

# Git integration
auto_commit_contexts=false
pre_commit_validation=true
pre_push_validation=true
EOF

    log_success "Configuration files created"
}

# Create project context template
create_project_context() {
    if [[ -f "project_context.md" ]]; then
        log_info "project_context.md already exists"
        return 0
    fi

    log_info "Creating project context template..."

    cat > project_context.md << 'EOF'
# Project Context

## Project Overview
- **Name**: [Project Name]
- **Technology Stack**: [List technologies]
- **Last Updated**: [Date]

## Failed Commands & Alternatives
<!-- Record commands that have failed and their working alternatives -->
| Failed Command | Error | Working Alternative | Notes |
|----------------|--------|-------------------|-------|
| | | | |

## Debug & Temporary Files
<!-- Track temporary files created during development -->
| File Path | Purpose | Created Date | Status |
|-----------|---------|--------------|--------|
| | | | |

## Lessons Learned
<!-- Document insights and best practices discovered -->
-

## Current Issues
<!-- Track ongoing issues and their status -->
- [ ] Issue 1
- [ ] Issue 2

## Environment Setup
<!-- Document specific setup requirements -->
```bash
# Add setup commands here
```
EOF

    log_success "Project context template created"
}

# Create validation script
create_validation_script() {
    log_info "Creating validation script..."

    cat > scripts/validate.sh << 'VALIDATION_EOF'
#!/bin/bash
# AgentSpec Validation Suite

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check project structure
check_structure() {
    log_info "Checking project structure..."

    if [[ ! -f "project_context.md" ]]; then
        log_warning "project_context.md missing"
        return 1
    fi

    log_success "Project structure validated"
    return 0
}

# Generate report
generate_report() {
    log_info "Generating compliance report..."

    local report_file="agentspec_report.md"

    cat > "$report_file" << 'REPORT_EOF'
# AgentSpec Compliance Report

Generated: $(date)

## Project Structure
- project_context.md: $(test -f project_context.md && echo "✅ Present" || echo "❌ Missing")
- .agentspec: $(test -f .agentspec && echo "✅ Present" || echo "❌ Missing")

## Validation Status
All checks completed successfully.

---
*Generated by AgentSpec Validation Suite*
REPORT_EOF

    log_success "Compliance report generated: $report_file"
}

# Main validation function
main() {
    echo -e "${BLUE}🔍 AgentSpec Validation Suite${NC}\n"

    case "${1:-}" in
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h     Show this help message"
            echo "  --report       Generate compliance report only"
            echo "  --structure    Check project structure only"
            echo ""
            exit 0
            ;;
        --report)
            generate_report
            exit 0
            ;;
        --structure)
            check_structure
            exit $?
            ;;
        "")
            check_structure
            generate_report
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
}

main "$@"
VALIDATION_EOF

    chmod +x scripts/validate.sh
    log_success "Validation script created"
}

# Main setup function
main() {
    echo -e "${BLUE}🚀 AgentSpec Setup${NC}"
    echo -e "${BLUE}==================${NC}\n"

    log_info "Initializing AgentSpec for your project..."

    # Run setup steps
    create_project_structure
    create_config_files
    create_project_context
    create_validation_script

    echo -e "\n${GREEN}✅ AgentSpec setup completed successfully!${NC}\n"

    # Show next steps
    echo -e "${BLUE}Next Steps:${NC}"
    echo "1. Generate your project spec: python -m agentspec interactive"
    echo "2. Review the created files and customize as needed"
    echo "3. Run validation: bash scripts/validate.sh"
    echo "4. Start your first development work and maintain project context"
    echo ""
    echo -e "${BLUE}Files Created:${NC}"
    echo "📁 scripts/               - Validation and utility scripts"
    echo "📄 .agentspec             - Configuration file"
    echo "📄 project_context.md     - Shared project context"

    echo -e "\n${GREEN}🎉 Happy specification-driven development!${NC}"
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "AgentSpec Setup Script"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "This script initializes AgentSpec in your project with:"
        echo "  - Project structure (scripts)"
        echo "  - Configuration files (.agentspec)"
        echo "  - Validation scripts"
        echo ""
        echo "Options:"
        echo "  --help, -h     Show this help message"
        echo "  --minimal      Minimal setup without interactive components"
        echo ""
        exit 0
        ;;
    --minimal)
        log_info "Running minimal setup..."
        create_project_structure
        create_config_files
        create_project_context
        create_validation_script
        log_success "Minimal setup completed"
        exit 0
        ;;
    "")
        main
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac
