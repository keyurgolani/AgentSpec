name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]
    
    - name: Test CLI functionality
      run: |
        # Test basic CLI commands
        python -m agentspec --help
        python -m agentspec list-tags
        
        # Test spec generation
        python -m agentspec generate --tags general,testing --output test_spec.md
        
        # Verify output file was created
        test -f test_spec.md
        
        # Check content
        grep -q "AgentSpec - Project Specification" test_spec.md
    
    - name: Test setup script
      run: |
        # Test minimal setup
        bash setup.sh --minimal
        
        # Verify structure was created
        test -d task_contexts
        test -d scripts
        test -d docs
        test -f .agentspec
        test -f project_context.md
        test -f scripts/validate.sh
    
    - name: Test validation script
      run: |
        # Make validation script executable
        chmod +x scripts/validate.sh
        
        # Test validation commands
        bash scripts/validate.sh --help
        bash scripts/validate.sh --structure
        bash scripts/validate.sh --report
        
        # Verify report was generated
        test -f agentspec_report.md

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        # Run flake8 with configuration from setup.cfg
        flake8 agentspec tests
    
    - name: Check code formatting with black
      run: |
        black --check --diff agentspec/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff --profile=black agentspec/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run bandit security linter
      run: |
        bandit -r agentspec/
    
    - name: Check for known security vulnerabilities
      run: |
        # Create a minimal requirements file for safety check
        echo "# No external dependencies" > requirements.txt
        safety check --file requirements.txt || true

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test,dev]
    
    - name: Full integration test
      run: |
        # Initialize a test project
        mkdir test_project
        cd test_project
        
        # Copy setup script
        cp ../setup.sh .
        
        # Run full setup
        bash setup.sh --minimal
        
        # Generate comprehensive spec using installed agentspec
        python -m agentspec generate --tags general,testing,frontend,backend,security --output full_spec.md
        
        # Validate the setup
        bash scripts/validate.sh --structure
        
        # Verify all expected files exist
        test -f full_spec.md
        test -f project_context.md
        test -f .agentspec
        test -d task_contexts
        test -d scripts
        test -d docs
        
        # Check spec content
        grep -q "AgentSpec - Project Specification" full_spec.md
        
        echo "✅ Integration test passed!"

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Verify all documentation files exist
        test -f README.md
        test -f CONTRIBUTING.md
        test -f CHANGELOG.md
        test -f LICENSE
        test -f docs/getting-started.md
        test -f docs/specifications.md
        
        # Check for broken links in markdown files
        # This is a simple check - in production you might use a proper link checker
        grep -r "](http" docs/ README.md CONTRIBUTING.md || true
        
        echo "✅ Documentation check passed!"